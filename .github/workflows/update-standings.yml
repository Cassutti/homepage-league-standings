name: Update Cardiff Standings

on:
  workflow_dispatch:
  #schedule:
    #- cron: '45 19 * * 1-5'
    #- cron: '*/15 20-23 * * 1-5'
    #- cron: '*/15 12-23 * * 6,0'
    #- cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect Cardiff‚Äôs League and Season
        run: |
          TEAM_ID=43
          MONTH=$(date +%m)
          YEAR=$(date +%Y)

          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi

          echo "üìÖ Using season: $SEASON"
          mkdir -p tmp

          response=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$response" | jq . > tmp/cardiff-response.json

          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')
          LEAGUE_NAME=$(echo "$response" | jq -r '.response[0].league.name')

          if [ "$LEAGUE_ID" = "null" ] || [ -z "$LEAGUE_ID" ]; then
            echo "‚ùå Could not determine league ID. Exiting."
            cat tmp/cardiff-response.json
            exit 1
          fi

          echo "‚úÖ Cardiff are in $LEAGUE_NAME (League ID $LEAGUE_ID) for $SEASON"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV

          # Calculate last season
          LAST_SEASON=$((SEASON - 1))
          echo "LAST_SEASON=$LAST_SEASON" >> $GITHUB_ENV

      - name: Fetch current season standings
        run: |
          echo "üì• Fetching current season standings for league $LEAGUE_ID, season $SEASON"
          curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&league=${LEAGUE_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com" > tmp/current-standings.json

      - name: Fetch last season standings
        run: |
          echo "üì• Fetching last season standings for league $LEAGUE_ID, season $LAST_SEASON"
          curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${LAST_SEASON}&league=${LEAGUE_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com" > tmp/last-season-standings.json

      - name: Merge current standings with last season info
        run: |
          echo "üîÑ Merging current standings with last season data..."
          jq --slurpfile lastSeason tmp/last-season-standings.json '
            .response[0].league.standings[0] |= map(
              . as $team |
              ($lastSeason[0].response[0].league.standings[0][] | select(.team.id == $team.team.id)) as $lastTeam |

              . + {
                highlight: (.team.id == 43),
                lastSeasonLeague: ($lastSeason[0].response[0].league.name // "Unknown"),
                lastSeasonPosition: ($lastTeam.rank // "?")
              }
            )
          ' tmp/current-standings.json > data/standings.json

      - name: Clean old logos
        run: |
          echo "üßπ Cleaning old logos"
          rm -rf assets/logos

      - name: Download team icons
        run: |
          mkdir -p assets/logos
          jq -r '.response[0].league.standings[0][] | "\(.team.id) \(.team.logo)"' data/standings.json |
          while read -r id url; do
            echo "üñºÔ∏è  Downloading logo for team $id"
            curl -s -o "assets/logos/${id}.png" "$url"
          done

      - name: Download league icon
        run: |
          curl -s -o league-icon.png "https://media.api-sports.io/football/leagues/${LEAGUE_ID}.png"

      - name: Add and commit league icon
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add league-icon.png
          if git diff --cached --quiet; then
            echo "No changes in league icon."
          else
            git commit -m "Update league icon for league ${LEAGUE_ID}"
            git push
          fi

      - name: Commit and Push if Changed
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/standings.json tmp/cardiff-response.json assets/logos/
          if git diff --cached --quiet; then
            echo "üü¢ No changes to commit."
          else
            git commit -m "Update standings and team icons"
            git push
          fi
