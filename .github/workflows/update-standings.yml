name: Update Cardiff Standings

on:
  workflow_dispatch:
  # schedule:
    # - cron: '45 19 * * 1-5'
    # - cron: '*/15 20-23 * * 1-5'
    # - cron: '*/15 12-23 * * 6,0'
    # - cron: '0 0 * * *'
    
permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Detect Cardiff‚Äôs League and Season
        run: |
          TEAM_ID=43
          MONTH=$(date +%m)
          YEAR=$(date +%Y)

          if [ "$MONTH" -lt 8 ]; then
            SEASON=$((YEAR - 1))
          else
            SEASON=$YEAR
          fi

          echo "üìÖ Using season: $SEASON"
          mkdir -p tmp

          response=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&team=${TEAM_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$response" | jq . > tmp/cardiff-response.json

          LEAGUE_ID=$(echo "$response" | jq -r '.response[0].league.id')

          if [ "$LEAGUE_ID" = "null" ] || [ -z "$LEAGUE_ID" ]; then
            echo "‚ùå Could not determine league ID. Exiting."
            cat tmp/cardiff-response.json
            exit 1
          fi

          echo "‚úÖ Detected League ID: $LEAGUE_ID"
          echo "LEAGUE_ID=$LEAGUE_ID" >> $GITHUB_ENV
          echo "SEASON=$SEASON" >> $GITHUB_ENV

      - name: Fetch Standings + Previous Season Placement (Efficient)
        run: |
          echo "üì• Fetching current season standings..."
          CURRENT=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${SEASON}&league=${LEAGUE_ID}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$CURRENT" | jq . > tmp/current-standings.json

          echo "üîÅ Getting last season standings from leagues above and below..."
          LAST_SEASON=$((SEASON - 1))
          ABOVE=$((LEAGUE_ID - 1))
          BELOW=$((LEAGUE_ID + 1))

          echo "{}" > tmp/last-season-map.json

          for LID in $LEAGUE_ID $ABOVE $BELOW; do
            echo "Fetching last season standings for league $LID"
            RESPONSE=$(curl -s --request GET \
              --url "https://api-football-v1.p.rapidapi.com/v3/standings?season=${LAST_SEASON}&league=${LID}" \
              --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
              --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

            LEAGUE_NAME=$(echo "$RESPONSE" | jq -r '.response[0].league.name')

            echo "$RESPONSE" | jq -c --arg lname "$LEAGUE_NAME" '
              .response[0].league.standings[0][] |
              { (.team.id|tostring): { lastRank: .rank, lastLeague: $lname } }
            ' | jq -s 'add' > tmp/league-${LID}-map.json
          done

          echo "Merging previous season rank info..."
          jq -s '.[0] * .[1] * .[2]' tmp/league-*.json > tmp/last-season-map.json

      - name: Fetch Upcoming Fixtures
        run: |
          echo "üìÖ Fetching upcoming fixtures..."
          START_DATE=$(date -d "+0 days" +%Y-%m-%d)
          END_DATE=$(date -d "+6 days" +%Y-%m-%d)

          FIXTURES=$(curl -s --request GET \
            --url "https://api-football-v1.p.rapidapi.com/v3/fixtures?league=${LEAGUE_ID}&season=${SEASON}&from=${START_DATE}&to=${END_DATE}" \
            --header "X-RapidAPI-Key: ${{ secrets.RAPIDAPI_KEY }}" \
            --header "X-RapidAPI-Host: api-football-v1.p.rapidapi.com")

          echo "$FIXTURES" | jq . > tmp/fixtures.json

          # Build a map of next opponent per team
          jq -r '
            .response[] |
            select(.teams.home.id and .teams.away.id) |
            [
              (.teams.home.id|tostring),
              "\(.teams.away.name) (H)"
            ],
            [
              (.teams.away.id|tostring),
              "\(.teams.home.name) (A)"
            ]
          ' tmp/fixtures.json |
          jq -Rs '
            split("\n") | map(select(length > 0)) | map(split(" ") | {(.[0]): {nextUp: (.[1:] | join(" "))}}) | add
          ' > tmp/next-fixtures-map.json

      - name: Build Final standings.json
        run: |
          jq --slurpfile last tmp/last-season-map.json \
             --slurpfile fixtures tmp/next-fixtures-map.json '
            .response[0].league.standings[0] |= map(
              . + {
                highlight: (if .team.id == 43 then true else false end),
                lastSeasonLeague: ($last[0][(.team.id|tostring)].lastLeague // "Unknown"),
                lastSeasonPosition: ($last[0][(.team.id|tostring)].lastRank // "?"),
                nextUp: ($fixtures[0][(.team.id|tostring)].nextUp // "TBD")
              }
            )
          ' tmp/current-standings.json > data/standings.json

      - name: Clean old logos
        run: |
          echo "üßπ Cleaning old logos"
          rm -rf assets/logos

      - name: Download team icons
        run: |
          mkdir -p assets/logos
          jq -r '.response[0].league.standings[0][] | "\(.team.id) \(.team.logo)"' data/standings.json |
          while read -r id url; do
            echo "üñºÔ∏è  Downloading logo for team $id"
            curl -s -o "assets/logos/${id}.png" "$url"
          done

      - name: Download league icon
        run: |
          curl -s -o league-icon.png "https://media.api-sports.io/football/leagues/${LEAGUE_ID}.png"

      - name: Commit and Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add data/standings.json tmp/cardiff-response.json assets/logos/ league-icon.png
          if git diff --cached --quiet; then
            echo "üü¢ No changes to commit."
          else
            git commit -m "Update standings with last season league, rank, and next fixture"
            git push
          fi
